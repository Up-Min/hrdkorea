package DAO;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import DTO.Member;

public class MemberDAO {
	Connection conn = null; //db연결 담당
	PreparedStatement ps = null; //쿼리 연결 담당
	ResultSet rs = null; //결과 담아오는 그거
	
	// DB 연결 메소드
	public static Connection getConnection() throws Exception {
		Class.forName("oracle.jdbc.OracleDriver");//오라클 드라이버 로드
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "gisa", "gisa1234");
		return con; // 연결정보를 리턴해준다. 
	} 
	
	//insert (회원등록)
	// request 는 view단에서 요청한 값이 들어가있다. 그래서 받아온 데이터들을 파라미터로 하나하나 빼올 수 있어짐.
	public String insert (HttpServletRequest request, HttpServletResponse response) {
		int custo = Integer.parseInt(request.getParameter("custno"));
		String custname = request.getParameter("custname");
		String phone = request.getParameter("phone");
		String address = request.getParameter("address");
		String joindate = request.getParameter("joindate");
		String grade = request.getParameter("grade");
		String city = request.getParameter("city");
		int result = 0;
		
		try {
			conn = getConnection(); //db 연결. 리소스는 열면 무조건 닫아야 하기 때문에 try, catch 사용.
			String sql = "insert into member_tbl_02 values (?,?,?,?,to_date(?,'YYYY-MM-DD'),?,?)";
			ps = conn.prepareStatement(sql);
			ps.setInt(1, custo);
			ps.setString(2, custname);
			ps.setString(3, phone);
			ps.setString(4, address);
			ps.setString(5, joindate);
			ps.setString(6, grade);
			ps.setString(7, city);
			
			// insert, update, delete 성공한 갯수를 반환함. 
			result = ps.executeUpdate();
			System.out.println(result);
			
			conn.close();
			ps.close();
			
			
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return "add";
	}
	
	// 회원번호 자동 증가
	public String nextCustno(HttpServletRequest request, HttpServletResponse response) {
		try{
			conn = getConnection();
			String sql = "select max(custno)+1 custno from member_tbl_02";
//			제일 큰 번호에 +1 을 시켜줌.
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			
			int custno = 0;
			
			if(rs.next()) custno = rs.getInt(1);
			System.out.println("1");
			request.setAttribute("custno", custno);
//			그리고 그 값을다시 지정해준다.	
			conn.close();
			ps.close();
			rs.close();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return "add.jsp";
	}
	
	//회원목록 조회 (전부 가져오기)
	public String selectAll(HttpServletRequest request, HttpServletResponse response) {
		ArrayList<Member> list = new ArrayList<Member>();
		try {		
			conn = getConnection();
			String sql = "select custno, custname, phone, address, TO_CHAR(joindate, 'YYYY-MM-DD') joindate,"; 
			sql += "DECODE(grade, 'A', 'VIP', 'B', '일반', 'C', '직원') grade, city from member_tbl_02 order by custno";
	// grade세부 설정과 같이 어지간한 건 전부 DB로 해결할 수 있어야한다. - decode.
			
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery(); //DB에서 가져온 데이터 넣어줌.
			
			while(rs.next()) {
				Member member = new Member();
				member.setCustno(rs.getInt(1));
				member.setCustname(rs.getString(2));
				member.setPhone(rs.getString(3));
				member.setAddress(rs.getString(4));
				member.setJoindate(rs.getString(5));
				member.setGrade(rs.getString(6));
				member.setCity(rs.getString(7));	
				list.add(member);
			}
			request.setAttribute("list", list);
			conn.close();
			ps.close();
			rs.close();
		}catch (Exception e) {
			e.printStackTrace();
		} 
		return "list.jsp";
	}
	
	public String selectResult(HttpServletRequest request, HttpServletResponse response) {
		ArrayList<Member> money = new ArrayList<Member>();
		try {		
			conn = getConnection();
			String sql = "select m1.custno, m1.custname, DECODE(m1.grade, 'A', 'VIP', 'B', '일반', 'C', '직원') grade, sum(m2.price) price"
					+ " from member_tbl_02 m1, money_tbl_02 m2 "
					+ " where m1.custno = m2.custno "
					+ " group by(m1.custno, m1.custname, grade) "
					+ " order by price desc "; 
			
			
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery(); //DB에서 가져온 데이터 넣어줌.
			
			while(rs.next()) {
				Member member = new Member();
				member.setCustno(rs.getInt(1));
				member.setCustname(rs.getString(2));
				member.setPhone(rs.getString(3));
				member.setAddress(rs.getString(4));
				member.setJoindate(rs.getString(5));
				member.setGrade(rs.getString(6));
				member.setCity(rs.getString(7));	
				money.add(member);
			}
			request.setAttribute("money", money);
			conn.close();
			ps.close();
			rs.close();
		}catch (Exception e) {
			e.printStackTrace();
		} 
		return "list.jsp";
		
	}
	
	
	
	//회원정보 수정위한 원본 가져오기
	public String modify(HttpServletRequest request, HttpServletResponse response) {
//		수정할 때는 내가 이전에 입력했던 정보가 보이는 상태에서 수정을 한다.
//		즉, 데이터를 먼저 가져와야 한다.
//		컨트롤러에 리퀘스트에 있는 list에서 가져온 custno. 그 정보를 사용할 수 있다. 
	try {
		conn = getConnection();
		int custno = Integer.parseInt(request.getParameter("custno"));
		String sql = "select custname, phone, address, TO_CHAR(joindate, 'YYYY-MM-DD') joindate, grade, city ";
		sql += "from member_tbl_02 where custno=" + custno;
		
		ps = conn.prepareStatement(sql);
		rs = ps.executeQuery(); //DB에서 가져온 데이터 넣어줌.
		
		Member member = new Member();
		
		// 하나만 가져올거니까 굳이 리스트화 안하고 바로 하나만 가져
		if(rs.next()) {
			member.setCustno(custno);
			member.setCustname(rs.getString(1));
			member.setPhone(rs.getString(2));
			member.setAddress(rs.getString(3));
			member.setJoindate(rs.getString(4));
			member.setGrade(rs.getString(5));
			member.setCity(rs.getString(6));
		}
		request.setAttribute("member", member);
		request.setAttribute("custno", custno);
	} catch (Exception e) {
		e.printStackTrace();
	}
	return "modify.jsp";
	}
	
	// 이제, 업데이트.
	public int update (HttpServletRequest request, HttpServletResponse response) { 
		int custo = Integer.parseInt(request.getParameter("custno"));
		String custname = request.getParameter("custname");
		String phone = request.getParameter("phone");
		String address = request.getParameter("address");
		String joindate = request.getParameter("joindate");
		String grade = request.getParameter("grade");
		String city = request.getParameter("city");
		int result = 0;
		
		try {
			conn = getConnection(); //db 연결. 리소스는 열면 무조건 닫아야 하기 때문에 try, catch 사용.
			String sql = "update member_tbl_02 set";
					sql += " custname = ?, ";
					sql += " phone = ?, ";
					sql += " address = ?, ";
					sql += " joindate = to_date(?,'yyyy-mm-dd'), ";
					sql += " grade = ?, ";
					sql += " city = ? ";
					sql += " where custno = ?";
			
					ps = conn.prepareStatement(sql);
					ps.setString(1, custname);
					ps.setString(2, phone);
					ps.setString(3, address);
					ps.setString(4, joindate);
					ps.setString(5, grade);
					ps.setString(6, city);
					ps.setInt(7, custo);
					
			// insert, update, delete 성공한 갯수를 반환함. 
			result = ps.executeUpdate();
			// 우리는 업데이트 하나만 할거니까 리턴값이 1이 나올거임. 그 1을 써먹는다.
			// 회원정보 수정 완료여부 표시를 위해 1을 써먹을거다.
			
			conn.close();
			ps.close();
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return result;
	}
	
	public int delete (HttpServletRequest request, HttpServletResponse response) {
		int result = 0;
		try {
			conn = getConnection();
			// request 된 custnumber을 바로 받아준다.
			String cusno = request.getParameter("custno");
			String sql = "delete member_tbl_02 where custno = " + cusno ;
			ps = conn.prepareStatement(sql);
			result = ps.executeUpdate();
			conn.close();
			ps.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result; //delete 성공여부 반환. 컨트롤러의 result2에 들어가게 됨.
	}
	
	
}
